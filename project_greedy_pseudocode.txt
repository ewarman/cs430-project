CS 430 Final Project
Greedy Solution Pseudocode
Rachael Affenit, Emily Warman

Helper Functions:
	drange() -> gets the x and y values of all possible lines in range of given points {O(n)}
	get_all_possible() -> sorts the points and returns all possible dividing lines {O(n)}
	make_graph() -> creates the initial graph from all points {O(n)}
	separate() -> get number of newly separated points for a given solution {O(n^2)}
	draw() -> draw a new line to separate points in the graph {O(n^2)}
	nodes_left() -> decide if there are any unseparated nodes {O(n)}

Main Functions:
	find_best() -> finds the best line based on the number of newly separated points {O(n^3)}
	segment() -> segments the given points in the graph {O(n^4)}

Total Time Complexity: O(n^4)
	Segment calls find_best() n times

----------------------------------------------------------------------

def find_best(graph, all_lines, lines_drawn, idx):
    best_sep = 0
    best_line = None

    # Iterate through all possible lines
    for line in all_lines:
        if line in lines_drawn:
            continue

	# As long as line is not already drawn
        else:
	    # Find number of new separations for this line
            sep = separate(graph, line, idx)

	    # If this soln creates a better line, save the line
            if sep > best_sep:
                best_line = line
                best_sep = sep

    return best_line, best_sep
            
def segment(points):
    all_x_lines, all_y_lines = get_all_possible(points)
    graph = make_graph(points)
    OPT = math.ceil(math.sqrt(len(points))*2)-2
    S = []
    vh = []
    x_lines_drawn = []
    y_lines_drawn = []
    total_lines_drawn = 0
    
    while nodes_left(graph):
        best_line = None
        best_axis = 0
        
	# Find the best line on each axis
        best_line_x, separated_x = find_best(graph, all_x_lines, x_lines_drawn, 0)
        best_line_y, separated_y = find_best(graph, all_y_lines, y_lines_drawn, 1)
        
	# Determine which line is better
        if separated_x >= separated_y:
            best_line = best_line_x
            best_axis = 0
        else:
            best_line = best_line_y
            best_axis = 1
        
	# Append the line and its attributes to the appropriate lists
        if best_axis: 
            y_lines_drawn.append(best_line)
        else: 
            x_lines_drawn.append(best_line)
        S.append(best_line)
        vh.append(best_axis)

	# Draw line and increment counter
        total_lines_drawn += 1
        graph,sep = draw(graph, best_line, best_axis)

    return (graph,S,vh,total_lines_drawn,x_lines_drawn,y_lines_drawn)